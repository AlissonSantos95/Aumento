#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 15, 2020 10:21:48 AM -0300  platform: Windows NT

import sys
import os
from tkinter import messagebox
from tkinter.messagebox import showwarning
from tkinter.messagebox import showinfo





try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import NewOne_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    NewOne_support.set_Tk_var()
    top = Aumento (root)
    NewOne_support.init(root, top)
    root.mainloop()

w = None
def create_Aumento(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Aumento(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    NewOne_support.set_Tk_var()
    top = Aumento (w)
    NewOne_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Aumento():
    global w
    w.destroy()
    w = None

class Aumento:
    def Calculo(self) :
       Formacao = self.Formacao.get()
       nomes = self.Nome1.get()
       idades = self.Idade.get()
       exp = self.Exp.get()
       Soldo = self.Salario.get()
       funny = self.funcionario.get()
    def FundamentalA(self):
         Formacao = "F"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "F" :
             if int(idades) >= 18 or int(exp) >= 3:
                 aumento = float(Soldo) * 0.10
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
             if int(idades) < 18 and int(exp) < 3:
                 aumento = float(Soldo) * 0.05
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
    def MedioB(self):
         Formacao = "M"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "M" :
             if int(idades) >= 20 or int(exp) >= 5:
                 aumento = float(Soldo) * 0.20
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
             if int(idades) < 20 and int(exp) < 5:
                 aumento = float(Soldo) * 0.10
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
    def TecnicoC(self):
         Formacao = "T"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "T" :
             if int(idades) >= 25 or int(exp) >= 7:
                 aumento = float(Soldo) * 0.30
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
             if int(idades) < 25 and int(exp) < 7:
                 aumento = float(Soldo) * 0.20
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
    def AnalfabetoE(self):
         Formacao = "A"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "A" :
             if int(idades) >= 40 or int(exp) >= 12:
                  aumento = float(Soldo) * 0.50
                  print("aumento de:")
                  print(aumento)
                  print("seu total é:")
                  print(float(Soldo)+float(aumento))
                  print("funcionarios restantes")
             if int(idades) < 12 and int(exp) < 12:
                 aumento = float(Soldo) * 0.40
                 print("aumento de:")
                 print(aumento)
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
    def SuperiorD(self):
         Formacao = "S"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "S" :
             if int(idades) >= 30 or int(exp) >= 10:
                 aumento = float(Soldo) * 0.40
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
             if int(idades) < 18 and int(exp) < 10:
                 aumento = float(Soldo) * 0.30
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")
    def DoutoradoF(self):
         Formacao = "D"
         nomes = self.Nome1.get()
         idades = self.Idade.get()
         exp = self.Exp.get()
         Soldo = self.Salario.get()
         funcionarios = self.funcionario.get()
         if Formacao == "D" :
             if int(idades) >= 45 or int(exp) >= 20:
                 aumento = float(Soldo) * 0.80
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
             if int(idades) < 18 and int(exp) < 3:
                 aumento = float(Soldo) * 0.05
                 print("aumento de:")
                 print(aumento)
                 print("seu total é:")
                 print(float(Soldo)+float(aumento))
                 print("funcionarios restantes")
                 results = "seu aumento foi de", aumento
                 msg1=tk.messagebox.showinfo("Aumento de", results)
                 msg=tk.messagebox.askyesno("salvar", "Deseja salvar?")




    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("739x499+509+249")
        top.minsize(116, 1)
        top.maxsize(1924, 1062)
        top.resizable(1, 1)
        top.title("Aumento")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.funcionario = tk.Entry(top)
        self.funcionario.place(relx=0.257, rely=0.02,height=20, relwidth=0.154)
        self.funcionario.configure(background="white")
        self.funcionario.configure(disabledforeground="#a3a3a3")
        self.funcionario.configure(font="TkFixedFont")
        self.funcionario.configure(foreground="#000000")
        self.funcionario.configure(highlightbackground="#d9d9d9")
        self.funcionario.configure(highlightcolor="black")
        self.funcionario.configure(insertbackground="black")
        self.funcionario.configure(selectbackground="blue")
        self.funcionario.configure(selectforeground="white")
        
        self.Nome1 = tk.Entry(top)
        self.Nome1.place(relx=0.257, rely=0.12,height=20, relwidth=0.154)
        self.Nome1.configure(background="white")
        self.Nome1.configure(disabledforeground="#a3a3a3")
        self.Nome1.configure(font="TkFixedFont")
        self.Nome1.configure(foreground="#000000")
        self.Nome1.configure(highlightbackground="#d9d9d9")
        self.Nome1.configure(highlightcolor="black")
        self.Nome1.configure(insertbackground="black")
        self.Nome1.configure(selectbackground="blue")
        self.Nome1.configure(selectforeground="white")
        

        self.Idade = tk.Entry(top)
        self.Idade.place(relx=0.257, rely=0.2,height=20, relwidth=0.154)
        self.Idade.configure(background="white")
        self.Idade.configure(disabledforeground="#a3a3a3")
        self.Idade.configure(font="TkFixedFont")
        self.Idade.configure(foreground="#000000")
        self.Idade.configure(highlightbackground="#d9d9d9")
        self.Idade.configure(highlightcolor="black")
        self.Idade.configure(insertbackground="black")
        self.Idade.configure(selectbackground="blue")
        self.Idade.configure(selectforeground="white")
        

        self.Exp = tk.Entry(top)
        self.Exp.place(relx=0.257, rely=0.281,height=20, relwidth=0.154)
        self.Exp.configure(background="white")
        self.Exp.configure(disabledforeground="#a3a3a3")
        self.Exp.configure(font="TkFixedFont")
        self.Exp.configure(foreground="#000000")
        self.Exp.configure(highlightbackground="#d9d9d9")
        self.Exp.configure(highlightcolor="black")
        self.Exp.configure(insertbackground="black")
        self.Exp.configure(selectbackground="blue")
        self.Exp.configure(selectforeground="white")

        self.Salario = tk.Entry(top)
        self.Salario.place(relx=0.257, rely=0.361,height=20, relwidth=0.154)
        self.Salario.configure(background="white")
        self.Salario.configure(disabledforeground="#a3a3a3")
        self.Salario.configure(font="TkFixedFont")
        self.Salario.configure(foreground="#000000")
        self.Salario.configure(highlightbackground="#d9d9d9")
        self.Salario.configure(highlightcolor="black")
        self.Salario.configure(insertbackground="black")
        self.Salario.configure(selectbackground="blue")
        self.Salario.configure(selectforeground="white")

        

        self.fundamental = tk.Button(top)
        self.fundamental.place(relx=0.014, rely=0.541, relheight=0.04, relwidth=0.040)
        self.fundamental.configure(activebackground="#ececec")
        self.fundamental.configure(activeforeground="#000000")
        self.fundamental.configure(background="#d9d9d9")
        self.fundamental.configure(disabledforeground="#a3a3a3")
        self.fundamental.configure(foreground="#000000")
        self.fundamental.configure(highlightbackground="#d9d9d9")
        self.fundamental.configure(highlightcolor="black")
        self.fundamental.configure(justify='left')
        self.fundamental.configure(text='''F''')
        self.fundamental.configure(command=self.FundamentalA)
        

        self.Medio = tk.Button(top)
        self.Medio.place(relx=0.014, rely=0.600, relheight=0.04, relwidth=0.040)
        self.Medio.configure(activebackground="#ececec")
        self.Medio.configure(activeforeground="#000000")
        self.Medio.configure(background="#d9d9d9")
        self.Medio.configure(disabledforeground="#a3a3a3")
        self.Medio.configure(foreground="#000000")
        self.Medio.configure(highlightbackground="#d9d9d9")
        self.Medio.configure(highlightcolor="black")
        self.Medio.configure(justify='left')
        self.Medio.configure(text='''M''')
        self.Medio.configure(command=self.MedioB)
        

        self.Tecnico = tk.Button(top)
        self.Tecnico.place(relx=0.122, rely=0.541, relheight=0.04, relwidth=0.040)
        self.Tecnico.configure(activebackground="#ececec")
        self.Tecnico.configure(activeforeground="#000000")
        self.Tecnico.configure(background="#d9d9d9")
        self.Tecnico.configure(disabledforeground="#a3a3a3")
        self.Tecnico.configure(foreground="#000000")
        self.Tecnico.configure(highlightbackground="#d9d9d9")
        self.Tecnico.configure(highlightcolor="black")
        self.Tecnico.configure(justify='left')
        self.Tecnico.configure(text='''T''')
        self.Tecnico.configure(command=self.TecnicoC)
        

        self.Analfabeto = tk.Button(top)
        self.Analfabeto.place(relx=0.122, rely=0.600, relheight=0.04, relwidth=0.040)
        self.Analfabeto.configure(activebackground="#ececec")
        self.Analfabeto.configure(activeforeground="#000000")
        self.Analfabeto.configure(background="#d9d9d9")
        self.Analfabeto.configure(disabledforeground="#a3a3a3")
        self.Analfabeto.configure(foreground="#000000")
        self.Analfabeto.configure(highlightbackground="#d9d9d9")
        self.Analfabeto.configure(highlightcolor="black")
        self.Analfabeto.configure(justify='left')
        self.Analfabeto.configure(text='''A''')
        self.Analfabeto.configure(command=self.AnalfabetoE)
        

        self.Superior = tk.Button(top)
        self.Superior.place(relx=0.222, rely=0.541, relheight=0.04, relwidth=0.040)
        self.Superior.configure(activebackground="#ececec")
        self.Superior.configure(activeforeground="#000000")
        self.Superior.configure(background="#d9d9d9")
        self.Superior.configure(disabledforeground="#a3a3a3")
        self.Superior.configure(foreground="#000000")
        self.Superior.configure(highlightbackground="#d9d9d9")
        self.Superior.configure(highlightcolor="black")
        self.Superior.configure(justify='left')
        self.Superior.configure(text='''S''')
        self.Superior.configure(command=self.SuperiorD)
        

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.0, rely=0.18, relwidth=0.418)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=-0.014, rely=0.1, relwidth=1.042)

        self.TSeparator4 = ttk.Separator(top)
        self.TSeparator4.place(relx=0.419, rely=-0.02, relheight=1.042)
        self.TSeparator4.configure(orient="vertical")

        self.TSeparator5 = ttk.Separator(top)
        self.TSeparator5.place(relx=-0.072, rely=0.261, relwidth=0.488)

        self.TSeparator6 = ttk.Separator(top)
        self.TSeparator6.place(relx=-0.015, rely=0.341, relwidth=0.432)

        self.TSeparator7 = ttk.Separator(top)
        self.TSeparator7.place(relx=-0.041, rely=0.421, relwidth=0.461)

        self.TSeparator8 = ttk.Separator(top)
        self.TSeparator8.place(relx=-0.29, rely=0.501, relwidth=0.708)

        self.Doutorado = tk.Button(top)
        self.Doutorado.place(relx=0.222, rely=0.600, relheight=0.04, relwidth=0.040)
        self.Doutorado.configure(activebackground="#ececec")
        self.Doutorado.configure(activeforeground="#000000")
        self.Doutorado.configure(background="#d9d9d9")
        self.Doutorado.configure(disabledforeground="#a3a3a3")
        self.Doutorado.configure(foreground="#000000")
        self.Doutorado.configure(highlightbackground="#d9d9d9")
        self.Doutorado.configure(highlightcolor="black")
        self.Doutorado.configure(justify='left')
        self.Doutorado.configure(text='''D''')
        self.Doutorado.configure(command=self.DoutoradoF)

        self.Export_TXT = tk.Button(top)
        self.Export_TXT.place(relx=0.65, rely=0.02, height=34, width=87)
        self.Export_TXT.configure(activebackground="#ececec")
        self.Export_TXT.configure(activeforeground="#000000")
        self.Export_TXT.configure(background="#d9d9d9")
        self.Export_TXT.configure(disabledforeground="#a3a3a3")
        self.Export_TXT.configure(foreground="#000000")
        self.Export_TXT.configure(highlightbackground="#d9d9d9")
        self.Export_TXT.configure(highlightcolor="black")
        self.Export_TXT.configure(pady="0")
        self.Export_TXT.configure(text='''TXT''')
        #self.Export_TXT.configure(command=self.EXPORT)

        self.Print = tk.Button(top)
        self.Print.place(relx=0.433, rely=0.02, height=34, width=87)
        self.Print.configure(activebackground="#ececec")
        self.Print.configure(activeforeground="#000000")
        self.Print.configure(background="#d9d9d9")
        self.Print.configure(disabledforeground="#a3a3a3")
        self.Print.configure(foreground="#000000")
        self.Print.configure(highlightbackground="#d9d9d9")
        self.Print.configure(highlightcolor="black")
        self.Print.configure(pady="0")
        self.Print.configure(text='''Print''')

        self.PDF = tk.Button(top)
        self.PDF.place(relx=0.853, rely=0.02, height=34, width=87)
        self.PDF.configure(activebackground="#ececec")
        self.PDF.configure(activeforeground="#000000")
        self.PDF.configure(background="#d9d9d9")
        self.PDF.configure(disabledforeground="#a3a3a3")
        self.PDF.configure(foreground="#000000")
        self.PDF.configure(highlightbackground="#d9d9d9")
        self.PDF.configure(highlightcolor="black")
        self.PDF.configure(pady="0")
        self.PDF.configure(text='''PDF''')

        self.txtfuncionario = tk.Label(top)
        self.txtfuncionario.place(relx=0.014, rely=0.02, height=21, width=140)
        self.txtfuncionario.configure(activebackground="#f9f9f9")
        self.txtfuncionario.configure(activeforeground="black")
        self.txtfuncionario.configure(background="#d9d9d9")
        self.txtfuncionario.configure(disabledforeground="#a3a3a3")
        self.txtfuncionario.configure(foreground="#000000")
        self.txtfuncionario.configure(highlightbackground="#d9d9d9")
        self.txtfuncionario.configure(highlightcolor="black")
        self.txtfuncionario.configure(text='''Numero de Funcionarios:''')
        self.tooltip_font = "TkDefaultFont"
        self.txtfuncionario_tooltip = \
        ToolTip(self.txtfuncionario, self.tooltip_font, '''Quantos Funcionarios Atuais''')
        
        self.txtnome2 = tk.Label(top)
        self.txtnome2.place(relx=0.100, rely=0.440, height=21, width=150)
        self.txtnome2.configure(activebackground="#f9f9f9")
        self.txtnome2.configure(activeforeground="black")
        self.txtnome2.configure(background="#d9d9d9")
        self.txtnome2.configure(disabledforeground="#a3a3a3")
        self.txtnome2.configure(foreground="#000000")
        self.txtnome2.configure(highlightbackground="#d9d9d9")
        self.txtnome2.configure(highlightcolor="black")
        self.txtnome2.configure(text='''Selecione uma Formação:''')
        self.tooltip_font = "TkDefaultFont"
        self.txtnome2_tooltip = \
        ToolTip(self.txtnome2, self.tooltip_font, '''Selecione Uma formaçao''')
        
        self.txtnome = tk.Label(top)
        self.txtnome.place(relx=0.081, rely=0.12, height=21, width=42)
        self.txtnome.configure(activebackground="#f9f9f9")
        self.txtnome.configure(activeforeground="black")
        self.txtnome.configure(background="#d9d9d9")
        self.txtnome.configure(disabledforeground="#a3a3a3")
        self.txtnome.configure(foreground="#000000")
        self.txtnome.configure(highlightbackground="#d9d9d9")
        self.txtnome.configure(highlightcolor="black")
        self.txtnome.configure(text='''Nome:''')
        self.tooltip_font = "TkDefaultFont"
        self.txtnome_tooltip = \
        ToolTip(self.txtnome, self.tooltip_font, '''Nome do Funcionario''')

        self.txtidade = tk.Label(top)
        self.txtidade.place(relx=0.081, rely=0.2, height=21, width=38)
        self.txtidade.configure(activebackground="#f9f9f9")
        self.txtidade.configure(activeforeground="black")
        self.txtidade.configure(background="#d9d9d9")
        self.txtidade.configure(disabledforeground="#a3a3a3")
        self.txtidade.configure(foreground="#000000")
        self.txtidade.configure(highlightbackground="#d9d9d9")
        self.txtidade.configure(highlightcolor="black")
        self.txtidade.configure(text='''Idade:''')
        self.tooltip_font = "TkDefaultFont"
        self.txtidade_tooltip = \
        ToolTip(self.txtidade, self.tooltip_font, '''Idade do funcionario''')

        self.txtexp = tk.Label(top)
        self.txtexp.place(relx=0.081, rely=0.281, height=21, width=68)
        self.txtexp.configure(activebackground="#f9f9f9")
        self.txtexp.configure(activeforeground="black")
        self.txtexp.configure(background="#d9d9d9")
        self.txtexp.configure(disabledforeground="#a3a3a3")
        self.txtexp.configure(foreground="#000000")
        self.txtexp.configure(highlightbackground="#d9d9d9")
        self.txtexp.configure(highlightcolor="black")
        self.txtexp.configure(text='''Experiencia:''')
        self.tooltip_font = "TkDefaultFont"
        self.txtexp_tooltip = \
        ToolTip(self.txtexp, self.tooltip_font, '''Experiencia do funcionario''')

        self.txtsalario = tk.Label(top)
        self.txtsalario.place(relx=0.081, rely=0.361, height=21, width=41)
        self.txtsalario.configure(activebackground="#f9f9f9")
        self.txtsalario.configure(activeforeground="black")
        self.txtsalario.configure(background="#d9d9d9")
        self.txtsalario.configure(disabledforeground="#a3a3a3")
        self.txtsalario.configure(foreground="#000000")
        self.txtsalario.configure(highlightbackground="#d9d9d9")
        self.txtsalario.configure(highlightcolor="black")
        self.txtsalario.configure(text='''Salário''')
        self.tooltip_font = "TkDefaultFont"
        self.txtsalario_tooltip = \
        ToolTip(self.txtsalario, self.tooltip_font, '''salário do funcionario''')

        self.Calc = tk.Button(top)
        self.Calc.place(relx=0.292, rely=0.561, height=24, width=80)
        self.Calc.configure(activebackground="#ececec")
        self.Calc.configure(activeforeground="#000000")
        self.Calc.configure(background="#d9d9d9")
        self.Calc.configure(disabledforeground="#a3a3a3")
        self.Calc.configure(foreground="#000000")
        self.Calc.configure(highlightbackground="#d9d9d9")
        self.Calc.configure(highlightcolor="black")
        self.Calc.configure(pady="0")
        self.Calc.configure(text='''Salvar''')
        self.Calc.configure(command=self.Calculo)

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.433, rely=0.12, relheight=0.872, relwidth=0.562)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





